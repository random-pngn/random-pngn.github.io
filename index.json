[{"authors":["pngn"],"categories":null,"content":"普段は競プロ(C++)をしてます。AtCoderのIDはpngnです。青と黄色の間を行ったり来たりしています。\n最近は趣味でflutterでアプリ開発したり、Hugoをいじってます。\n好きなOSはUbuntu!好きなシェルはzsh!好きなエディタはVimです!\n","date":1582070400,"expirydate":-62135596800,"kind":"taxonomy","lang":"ja","lastmod":1582070400,"objectID":"fd6079e04f9f4827d10ac438840d9a6d","permalink":"https://ch-random.net/authors/pngn/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/pngn/","section":"authors","summary":"普段は競プロ(C++)をしてます。AtCoderのIDはpngnです。青と黄色の間を行ったり来たりしています。 最近は趣味でflutterでア","tags":null,"title":"pngn","type":"authors"},{"authors":["ATsU"],"categories":null,"content":"Oculus Questをご存知でしょうか. 5万円で買えるスタンドアローン(ココ大事!)VRHMDです. ゲーミングPC要らず, スマホでのセットアップだけでお手軽にVRへ飛べます. 開発もUnityやUE4を使えば比較的簡単にできます. 軽率に仮想空間作っていきましょう. 私は主にUnityでらんだむちゃんの録画環境作ったり, レイマーチングなど3Dレンダリングしたりしてます. らんだむちゃん@Vtuberをよろしく\u0026hellip;\nあ、自分のポートフォリオです.\n","date":1581984000,"expirydate":-62135596800,"kind":"taxonomy","lang":"ja","lastmod":1581984000,"objectID":"afc75aeba2eb737d78dbda65567e0712","permalink":"https://ch-random.net/authors/atsu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/atsu/","section":"authors","summary":"Oculus Questをご存知でしょうか. 5万円で買えるスタンドアローン(ココ大事!)VRHMDです. ゲーミングPC要らず, スマホでのセットアップだけ","tags":null,"title":"ATsU","type":"authors"},{"authors":["YuKi"],"categories":null,"content":"Yukarisansu Ki。 らんだむちゃん描きます。\n","date":1581984000,"expirydate":-62135596800,"kind":"taxonomy","lang":"ja","lastmod":1581984000,"objectID":"fdb75a21dfeec383a1ecc9c3200fcf64","permalink":"https://ch-random.net/authors/yuki/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/yuki/","section":"authors","summary":"Yukarisansu Ki。 らんだむちゃん描きます。","tags":null,"title":"YuKi","type":"authors"},{"authors":["pngn"],"categories":null,"content":"はじめに 競プロ勉強会第3回です。今回は列に関するデータ構造です。\n 目次\n(水色向け)\n 累積和 imos法 Segment Tree 平方分割 BIT 動的Segment Tree 遅延伝播Segment Tree Segment Tree beats Sparse Table  (青色向け)\n永続Segment Tree 領域木 Fractional-Cascading Segment Tree上の二分探索 平衡二分探索木treap 平衡二分探索木treap   1. 累積和 (問題)数列$a_i$が与えられる。クエリl, rに対し、$a_l + a_{l+1} + \u0026hellip; + a_r$を求めよ\n有名問題ですね。$b_i = a_1 + a_2 + \u0026hellip; + a_i$と置き、最初に計算しておくと求めるものは$b_r-b_{l-1}$になりますね。\nint a[100000], b[100001]; void build() { b[0] = 0; for (int i = 0; i \u0026lt; n; i++) b[i+1] = b[i] + a[i]; // 簡単のためb_iを[0, i)の和として1個ずらしている } void get(int l, int r) { return b[r+1] - b[l]; }  せっかくなのでclassで抽象化してしまいましょう。\nclass CumulativeSum { vector\u0026lt;int\u0026gt; a, b; bool flag; void build() { for (int i = 0; i \u0026lt; (int)a.size(); i++) b[i+1] = b[i] + a[i]; flag = false; } public: CumulativeSum(int n) : a(n, 0), b(n+1, 0) { flag = true; } CumulativeSum(vector\u0026lt;int\u0026gt; _a) : a(_a), b(_a.size() + 1, 0) { flag = true; } void change(int i, int x) { a[i] = x; } void add(int i, int x) { a[i] += x; } int get(int l, int r) { // [l, r)の範囲を求める if (flag) { build(); } return b[r] - b[l]; // 閉区間か半開区間かはお好きにどうぞ } };  累積和くらい何も見ずに30秒程度で書けるようになるべきですが、普段はライブラリを使えばいいと思います。コード量と時間の短縮になりますし、ライブラリ部分はバグらないですし、頭のリソースを累積和の実装に使いたくないので。みんなライブラリ整備しようね。\n累積和に載せられる代数構造は何でしょうか？答えは群です。そもそも基本的な代数構造を知らない人のために簡単な説明をしておきます。\n   代数構造 説明 例     マグマ 集合とその集合上の二項演算    半群 マグマ+結合則 min, max, gcd   モノイド 半群+単位元e(e*a=a*e=a) 行列   群 モノイド+逆元    アーベル群 群+可換則(a*b=b*a) 足し算, 掛け算    get()の中を見れば分かりますが、+に対して-(逆元)が必要ですね。もし[0, i)の情報以外いらないのであれば半群でいけます。前回学んだ繰り返し二乗法は半群に対して実行可能です。\n単一の値更新がO(1)、構築がO(n)、範囲取得がO(1)です。動的な更新は効率的に行えません。\nところで皆さん半開区間は好きですか？僕は大好きです。理由は簡単で閉区間だと区間の分割や併合で頭がバグるからです。細かい違いに見えるかもしれないですが、かなり変わります。意識してみて下さい。\n2. imos法 (問題)最初0がn個並んでいる。[l, r)の区間に+xをするクエリをq回行った後の数列を求めよ\nこの数列の差分に着目してみましょう。l-1からlで+xされ、r-1からrで-xされますね。差分の変化はO(1)で計算できるので、差分の数列を持っておいてそれを元に構築すればよいですね。\nclass CumulativeSum { vector\u0026lt;int\u0026gt; a, diff; bool flag; void build() { for (int i = 0; i \u0026lt; (int)a.size(); i++) a[i+1] = a[i] + diff[i]; flag = false; } public: CumulativeSum(int n) : a(n+1, 0), diff(n, 0) { flag = true; } void add(int l, int r, int x) { // [l, r) +x diff[l] = x; diff[r] = -x; } int get(int i) { if (flag) { build(); } return a[i+1]; } };  範囲の値更新がO(1)、構築がO(n)、単一の値取得がO(1)です。動的な更新は効率的に行えません。\n数列の差分を見るという考え方は非常に重要で、高難易度の問題でも使われます。\n3. Segment Tree 今日のメインディッシュです。モノイドに対して値の変更、区間演算をO(log n)で行うスグレモノです。イメージとしては下の画像のように完全二分木を作ると、任意の区間は高々O(log n)個の区間の和で表せるんですね。びっくりです。例えば[1, 7]は[1, 1], [2, 3], [4, 7]です。小さい例だと本当にlon nに落ちるか分かりにくいですね。\n適当に証明すると、完全二分木なので高さはlog nです。各行に対して選ばれるのは高々4個です。何故なら5個以上選ばれるなら3連続で選ばれる部分が存在し、その中の2連続のものうちどちらかは親が共通で、親を選ぶ方がよいからです。ガバガバですね。\n完全二分木の場合、根から順番に1, 2, 3, 4, 5,\u0026hellip;と番号をつけると各ノードiの親はi/2, 子供は2*i, 2*i+1です。indexが1から始まる事に注意して下さい。\ntemplate \u0026lt;typename T\u0026gt; class SegmentTree { int n; vector\u0026lt;T\u0026gt; node; function\u0026lt;T(T, T)\u0026gt; fun, fun2; bool customChange; T outValue, initValue; public: SegmentTree(int num, function\u0026lt;T(T, T)\u0026gt; resultFunction, T init, T e, function\u0026lt;T(T, T)\u0026gt; changeFunction = NULL) { // changeFunction: (input, beforevalue) =\u0026gt; newvalue fun = resultFunction; fun2 = changeFunction; customChange = changeFunction != NULL; n = 1; while (n \u0026lt; num) n *= 2; node.resize(2 * n); fill(node.begin(), node.end(), init); outValue = e; initValue = init; } void change(int num, T value) { num += n-1; if (customChange) node[num] = fun2(value, node[num]); else node[num] = value; while (num \u0026gt; 0) num /= 2, node[num] = fun(node[num * 2], node[num * 2 + 1]); } T get(int a, int b, int l = 0, int r = -1, int k = 1) { // [a, b) if (r == -1) r = n; if (a \u0026lt;= l \u0026amp;\u0026amp; r \u0026lt;= b) return node[k]; // 完全に範囲内 if (b \u0026lt;= l || r \u0026lt;= a) return outValue; // int mid = (l + r) / 2; return fun(rangeQuery(a, b, l, mid, 2*k), rangeQuery(a, b, mid, r, 2*k+1)); } }; // 個数, 演算, 初期値, 単位元(, 変更関数)を指定します // int sum(int a, int b) { return a + b; } // SegmentTree\u0026lt;int\u0026gt; sgt(n, sum, 0, 0); // sgt.change(i, x); // i番目をxに変更 // sgt.get(a, b); // [a, b)の範囲の演算結果を返す // もし、値の変更ではなく、元の値に追加したい時は // SegmentTree\u0026lt;int\u0026gt; sgt(n, sum, 0, 0, sum); // とすればよい(この仕様あまり好きじゃないけど)  最悪使い方さえ分かればいいです。かなり便利で、高難易度問題の一部によく使われます。簡単な問題もこれで殴れたりする。\n基本はモノイドに対して行えますが、単位元を無理やり作る事で半群も載せる事が出来ます。例えばminの単位元はINF, maxは-INF, gcdは0です。ちょっと頑張れば単位元が不要なSegment Treeも作れますが、[i, i)のクエリが飛んで来た時返す値に困るのでやめました。モノイドclassを分離するのがいいかも。\n単一の値更新がO(log n)、範囲取得がO(log n)です。動的に更新できます。\n4. 平方分割 セグメントツリーで不可能なクエリも要素を√n個に分割する事で色んなクエリがO(√n)で実行できます。セグメントツリーに比べて遅いですが、汎用的です。問題を見る方がいいでしょう。\n5. BIT ほぼセグメントツリーと同じだがモノイドでは無くアーベル群に制限したもの。つまり、最小値を求めるクエリとかには対応できない。というか(int, +, 0)でしか見た事が無い。その分実装と定数倍が速い。\nコードは間に合いませんでした。\n6. 動的Segment Tree 普通のSegment Treeは[0, n)の範囲なのでnが非常に大きい時はそのまま使えない。しかしオフラインクエリ(クエリが全部分かっている)の時は座標圧縮すると解けますが、オンラインクエリ(次のクエリが何か分からない)の時は使えません。だいたい座標圧縮でいけますが、オンラインクエリの時も動的Segment Treeを使えばよいです。\nやりたい事は簡単で、必要になるまで要素を作らない、値変更クエリが飛んできて初めて要素を作る感じです。\n7. 遅延伝播Segment Tree SegmentTreeは単一更新範囲取得が可能ですが、遅延伝播Segment Treeを使うと範囲更新が可能です。強いですね。その分実装と定数倍が重いです。これで殴れるって気づいたらライブラリを探しに行って下さい。いずれ書きます。\n8. Segment Tree beats 遅延伝播STは範囲更新の時、chminを行う事はできません。chminは元の値と与えられた値の小さい方に変更するクエリです。それをO($(log n)^2$)で行う事ができます。僕もまだ理解出来てません。できたら書きます。\n9. Sparse Table セグメントツリーの静的なやつで主にmin, maxに対して構築O(n log n)クエリO(1)にしたバージョンです。各点から$1, 2, 2^2, \u0026hellip;$の距離までの結果を持っておくと[a, b)のクエリは[a, a+2^t), [b-2^t, b)の解の\n11. SWAG 12. 永続Segment Tree 13. 領域木 Fractional-Cascading 14. Segment Tree上の二分探索 15. 平衡二分探索木treap 16. 平衡二分探索木treap ","date":1582070400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1582070400,"objectID":"4ee170d7ec11f301a711d802dfe689fa","permalink":"https://ch-random.net/post/10/","publishdate":"2020-02-19T00:00:00Z","relpermalink":"/post/10/","section":"post","summary":"列を扱うデータ構造","tags":["競技プログラミング","競プロ勉強会"],"title":"第3回競プロ勉強会","type":"post"},{"authors":["ATsU"],"categories":null,"content":"はじめに Hello Random-chan!\nらんだむちゃんVtuber計画進捗報告です. Unityで録画環境を作りました. 以下のようなことができます.\n  kinectでのモーショントラッキング\n  表情切り替え, 自動まばたき\n  ランタイム中の設定画面操作\n  スライド表示, 切り替え\n  簡易カメラ操作\n使用したアセットは末尾に示します. また, Universal Rendering Pipelineを使用しているのでグラフィック面で少々仕様が違うことがあります.\n  ここから部員向け  操作(デフォルト)   Esc:設定画面切り替え ↑, ↓:設定項目選択 Space:決定 →, ←:スライド切り替え c:カメラ切り替え w:口を開ける a, d:ウインク s:ジト目  設定項目追加   プロジェクトはスケルトンに入っています. それを編集するか, コピーしてとってもらえればと思います. (Assets/)Resources/Scripts/Setting.csで関数, パネルの追加を行えます. 詳しい方法はスクリプトを見るか直接聞いてください. 設定画面出し入れは空ゲームオブジェクトにStudioManagerをアタッチすればできます. (Assets/)Resources/Scripts/CameraMove.csをカメラにアタッチすることで位置の保存, ランタイム中の位置変更ができます. ポジションはインスペクタで設定できます. (Assets/)Resources/Scripts/SlideManager.csをImageコンポーネントにアタッチすることでスライドが使えます. スライドは現在Sprite(png, jpegなどをインポートして変換)のみ対応しています.  動画に合わせていじるべきところ   マテリアル:シェーダーは作成したもの(入力ベクトルに応じて2値化っぽくするもの)を使っていますが, 素のシェーダーの方がいいかもです. カメラ操作:ランタイム中の操作に合わせて実装してください. 何か欲しい機能があれば言ったら実装するかもしれません.  まとめ 動画\u0026hellip;作ろう\u0026hellip;\n#使用したアセット\n kinect with MS-SDK  https://assetstore.unity.com/packages/tools/kinect-with-ms-sdk-7747\n","date":1581984000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1581984000,"objectID":"a09d0a2cd798b819d78000be74c68bd3","permalink":"https://ch-random.net/post/3/","publishdate":"2020-02-18T00:00:00Z","relpermalink":"/post/3/","section":"post","summary":"ランダムのWebサイトを作りました","tags":["グラフィック","らんだむちゃん","LT会","Vtuber計画"],"title":"らんだむすたじお！","type":"post"},{"authors":["YuKi"],"categories":null,"content":"はじめに こんにちは. Yuです. 描くたびに顔が変わるらんだむちゃん描きました.\n完成までの過程を比較すると面白いかも.\nラフ 線画 着色 編集 雑誌風\nまとめ らんだむちゃんはかわいいのでみんな描こう！\n","date":1581984000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1581984000,"objectID":"32bd47e2e07c7fb62ba7107d49c3d197","permalink":"https://ch-random.net/post/8/","publishdate":"2020-02-18T00:00:00Z","relpermalink":"/post/8/","section":"post","summary":"らんだむちゃん描く","tags":["作品紹介","グラフィック"],"title":"らんだむちゃん","type":"post"},{"authors":["YuKi"],"categories":null,"content":"はじめに \r\r\rvar unityInstance = UnityLoader.instantiate(\"unityContainer\", \"Build/Gift4Yukari3.json\", {onProgress: UnityProgress});\r\r\r\r\rGift For Yukari-san\r\r\rこんにちは. Yuです. 描くたびに顔が変わるらんだむちゃん描きました.\n完成までの過程を比較すると面白いかも.\n","date":1581984000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1581984000,"objectID":"9cb857027f5108971604b506111b74b1","permalink":"https://ch-random.net/post/9/","publishdate":"2020-02-18T00:00:00Z","relpermalink":"/post/9/","section":"post","summary":"らんだむちゃん描く","tags":["グラフィック"],"title":"らんだむちゃん","type":"post"},{"authors":["pngn"],"categories":null,"content":"はじめに 競プロ勉強会第2回です。今回は数学的な話を中心にします。\n 目次\n(水色向け)\n 逆元 Combination 素数 gcd 繰り返し二乗法  (青色向け)\n包除原理 FFT 形式的冪級数 行列 対称性のある数え上げ   1. 逆元 xを整数、pを素数とすると、xの逆元yは$y \\equiv x^{-1} (mod p)$と表す事ができ、$xy \\equiv 1 (mod p)$を満たす整数です。これはyの取りうる値を0以上p-1以下とするとただ一つに定まります。\n(証明)a, bを0以上p-1以下とすると、$ax \\equiv bx (mod p)$を満たす時$a = b$となるため。\nこれ単体で聞かれる事はあまり無いですが、確率をmod pで整数で答えよ、や次のCombinationで用います。\n逆元を求める方法はフェルマーの小定理+繰り返し二乗法を用いる方法か拡張ユークリッドの互除法を用いる方法があります。\nフェルマーの小定理: 素数pとpと互いに素な整数aに対して$a^{p-1} \\equiv 1$が成り立つ。\n(証明)$a^0$, $a^1$, \u0026hellip;, $a^{p-2}$はpで割ったあまりは全て異なる。\n同様に$a^1$, $a^2$, \u0026hellip;, $a^{p-1}$はpで割ったあまりは全て異なる。\nよって$a^0 \\equiv a^{p-1}$\n2. Combination みんな大好きCombinationです。nCkです。$\\binom{n}{k}$と書きます。\n$\\binom{n}{k} = \\frac{n!}{k!(n-k)!}$ですね。これは横にk個、縦にn-k個の辺があるグリッドグラフで左下の点から右上の点に行く最短経路の総数ですね。\n$n!, (n!)^{-1} (mod p)$を前計算することでO(1)で求められます。\nここで使える有用なテクニックなのですが、\np = (p/n) * n + p%n\n(p/n) * n $\\equiv$ -p%n (mod p)\n$n^{-1} \\equiv$ -(p%n)$^{-1}$ * (p/n) (mod p)\nつまり、n!の逆元とp%(n+1)の逆元が求まれば(n+1)!の逆元が求まるわけです。p%(n+1)はn以下の整数なので、下から順番に記録しておくことで求められます。よって前計算はO(n)です。\n\u0026lt;基本公式\u0026gt;\n $\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}$  最初の1個を取るor取らない   $k\\binom{n}{k} = n\\binom{n-1}{k-1}$  $\\frac{n!}{(n-k)!(k-1)!}$   $\\binom{n}{k} = \\binom{n}{n-k}$  念の為    \u0026lt;公式\u0026gt;\n $\\sum_{i=0}^{n} \\binom{n}{i} = 2^n$  $(1 + 1)^n$の展開   $\\sum_{i=0}^{n/2} \\binom{n}{2i} = 2^{n-1}$  基本公式1を使ってΣを展開   $\\sum_{i=0}^{k} \\binom{n+i}{i} = \\binom{n+k+1}{k}$  横k縦nのグリッドグラフの全ての上の部分への行き方の総和 横k縦n+1のグリッドグラフの右上への行き方と等しい 一番上の縦の辺は必ず1箇所通るから   $\\sum_{i=0}^{k} \\sum_{j=0}^{l} \\binom{i+j}{i} = \\binom{k+l+2}{k+1}$  公式3を2回   $\\sum_{i=0}^{k} \\binom{n+i}{i} \\binom{m-i}{k-i} = \\binom{n+m+1}{k}$  公式3の一般化 横k縦n+m-k+1の縦をnとm-kに辺を1行あけて分割   $\\sum_{i=0}^{k} \\binom{n}{i} \\binom{m}{k-i} = \\binom{n+m}{k}$  横k縦n+m-kを斜めに切る感じ 左は下からn, 右は上からmの点を通る直線    練習問題\n3. 素数 素数かどうかの判定はO($\\sqrt{n}$)でできる。\nbool is_Prime(int n) { for (int i = 2; i * i \u0026lt;= n; i++) { if (n % i == 0) return false; } return true; }  同様に約数列挙とかもできる。素数を前計算で求める方法は、\nvector\u0026lt;int\u0026gt; get(int mx) { vector\u0026lt;int\u0026gt; prime; for (int i = 2; i \u0026lt;= mx; i++) { bool ok = true; for (int j : prime) { if (i % j == 0) { ok = false; break; } } if (ok) { prime.push_back(mx); } } return prime; }  但し、これはそこそこ遅い。n\u0026lt;=10^6くらいで素数かどうかを判定するならエラトステネスのふるいを使うとよい。\nbool isPrime[1000001]; // trueで初期化 void init(int mx) { isPrime[0] = isPrime[1] = false; for (int i = 2; i \u0026lt;= mx; i++) { if (isPrime[i]) { for (int j = 2; i * j \u0026lt;= mx; j++) isPrime[i * j] = false; } } }  練習問題\n4. gcd 普通のgcd\nint gcd(int a, int b) { if (b == 0) return a; return gcd(b, a%b); }  拡張gcd ax+by=gとなるx, yもついでに求める。\nint extgcd(int a, int b, int \u0026amp;x, int \u0026amp;y) { int d = a; if (b != 0) { d = extgcd(b, a%b, y, x); y -= (a/b) * x; } else { x = 1; y = 0; } return d; }  5. 繰り返し二乗法 $a^b$をO(log b)で解く。\nint pw(int a, int b, int mod) { if (b == 0) return 1; if (b % 2 == 1) return pw(a, b-1, mod) * a % mod; int temp = pw(a, b/2, mod); return temp * temp % mod; }  練習問題\n行列とかにも使える。\n水色向け練習問題 練習問題1\n練習問題2\n練習問題3\n6. 包除原理 集合の数え上げの手法。ある部分集合がn個の集合に含まれる時、$(-1)^{n+1}$をかける。具体的には集合をbitで管理して、-1の(bitが立ってる個数+1)乗する。\n(工事中)\n","date":1581465600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1581465600,"objectID":"f3f1ac3fd0066457181604634ec92cb9","permalink":"https://ch-random.net/post/7/","publishdate":"2020-02-12T00:00:00Z","relpermalink":"/post/7/","section":"post","summary":"数学的な問題","tags":["競技プログラミング","競プロ勉強会"],"title":"第2回競プロ勉強会","type":"post"},{"authors":["pngn"],"categories":null,"content":"はじめに 競プロ勉強会第1回です。今回は探索を中心にやっていこうと思います。基本的に今回扱うのは全通りのパターンを列挙して調べる全探索のみ扱います。\n 目次\n(水色向け)\n 再帰 DFS BFS next_permutation bit全探索 半分全列挙  (青色向け)\n枝刈り IDA* A*   1. 再帰 これは探索とは直接関係無いのですが、皆さん再帰書けますか?再帰とはある概念をその概念自信で表す事です。\n例) フィボナッチ数列のn番目を求める再帰\nint fib(int n) { if (n == 1 || n == 2) return 1; return fib(n-1) + fib(n-2); }  このコードは非常に効率が悪いですが、その話はまたいずれ。\nこのコードには副作用が含まれないのできれいですが、競プロでは副作用のある関数を書きがちになります。注意しましょう。\n2. DFS 深さ優先探索としてよく知られていますね。DFSは木やグラフを探索するアルゴリズムで、とりあえず根から下まで辿って、戻りながらまだ行って無い点があれば行くを繰り返す手法です。グラフと言いましたが、直接的なグラフじゃない一般の場合でも暗に状態がノードのグラフとみなす事で対応できます。\n突然難しい単語が出てきて頭がこんがらがっているかもしれないですが、てきとうに再帰を書くとそれがそのままDFSになります。\nDFSは探索順序が重要で無い場合に使える事が多いです。\n練習問題 解答例\n3. BFS 幅優先探索です。これはDFSとは探索順序が異なり、根から近い順に探索するアルゴリズムです。例えば迷路を解くプログラムで使われます。\n実装方法はおおまかに\nqueue X Xに初期値を追加 while (!(Xが空)) { temp = Xの先頭要素 Xの先頭要素の削除 tempを元に探索し、次の探索位置をXに追加 }  でいけます。queueは最初に入れた値が最初に出てくるデータ構造です。恐らくこれだと分からないでしょうが、実際に練習問題を解いてみると理解できるでしょう。\nqueueをstackにするとdfsに、priority_queueにするとダイクストラ法になります。\n但し、この形だと再帰のように探索の結果をまとめ上げるのが苦手です。一長一短ですね。\n練習問題 解答例\n4. next_permutation これはC++の関数で、[1, 2, \u0026hellip; ,n]の並び替えn!通りを列挙してくれる関数です。使い方は少々独特で、\n//#include\u0026lt;algorithm\u0026gt; int n = 5, d[5] = {1, 2, 3, 4, 5}; // 昇順に入れておく do { // 処理 } while (next_permutation(d, d+n));  多分O($n!n$)\n練習問題 解答例\n5. bit全探索 例えばn\u0026lt;=20くらいで、n個の商品を買うor買わないの$2^n$通り調べる必要がある時、i番目の商品をi番目のビットで管理する方法です。i番目のビットが1なら買う、0なら買わないみたいに管理します。\n例) n\u0026lt;=20でn個の商品に値段$d_i$がある。取りうる値段を全て列挙せよ。(重複している場合は重複している数だけ列挙する)\nint n = 5, d[5] = {100, 20, 1000, 2, 30}; // dは商品の値段 for (int i = 0; i \u0026lt; (1\u0026lt;\u0026lt;n); i++) { int sum = 0; for (int j = 0; j \u0026lt; n; j++) { if (i \u0026amp; (1 \u0026lt;\u0026lt; j)) { // 買う sum += d[j]; } } printf(\u0026quot;%d\\n\u0026quot;, sum); }  O($2^nn$)です。\nそもそもbit演算に慣れていない人も多いと思います。簡単にまとめると、\n   演算 説明     a \u0026laquo; b aを左にbだけずらす   a \u0026raquo; b aを右にbだけずらす   \u0026amp; bit積   | bit和   ^ xor    です。詳細は検索して\n上のコードはbitを使わずdfsを用いて書く事もできます。\nint n = 5, d[5] = {100, 20, 1000, 2, 30}; // dは商品の値段 void dfs(int num, int sum) { if (num == n) { printf(\u0026quot;%d\\n\u0026quot;, sum); return; } dfs(num+1, sum); dfs(num+1, sum + d[num]); } // dfs(0, 0)で呼び出し  dfsでも書けるようになった方が良いでしょう。上のコードは副作用を含むのであまりきれいでは無いですが\u0026hellip;\n練習問題 解答例\n6. 半分全列挙 n\u0026lt;=40くらいで、全探索するとO($2^n$)かかるけど、半分に分けてソートし、二分探索と組み合わせる事でO($2^{\\frac{n}{2}}n$)に抑える方法。稀によく出る。\n例) n\u0026lt;=40 でn個の商品があり、値段$a_i$が与えられる。値段の和がちょうどkとなる選び方は何通り?\nint n, a[40], k; int half = n/2, rest = n - half; vector\u0026lt;int\u0026gt; d; // 前半2^half通り全列挙 for (int i = 0; i \u0026lt; (1\u0026lt;\u0026lt;half); i++) { int sum = 0; for (int j = 0; j \u0026lt; half; j++) { if (i \u0026amp; (1 \u0026lt;\u0026lt; j)) { sum += a[j]; } } d.push_back(sum); } sort(d.begin(), d.end()); int ans = 0; // 後半2^rest通り全列挙 for (int i = 0; i \u0026lt; (1\u0026lt;\u0026lt;rest); i++) { int sum = 0; for (int j = 0; j \u0026lt; rest; j++) { if (i \u0026amp; (1 \u0026lt;\u0026lt; j)) { sum += a[half + j]; } } ans += upper_bound(d.begin(), d.end(), k - sum) - lower_bound(d.begin(), d.end(), k - sum); // 少々テクニカル // lower_bound, upper_boundは第三引数以上/より大きい最初の要素のポインタorイテレータを返す関数 // ポインタやイテレータの引き算はその間の要素数になる // vectorのイテレータの引き算はO(1)だが、mapやsetとかのイテレータの引き算はO(n)だった気がするので注意 } printf(\u0026quot;%lld\\n\u0026quot;, ans);  半分を全列挙するのにbit全探索を用いるときれいに書ける事が多いです。\n練習問題 解答例\n水色向け練習問題 練習問題1\n練習問題2\n練習問題3\n練習問題4\n7. 枝刈り 枝刈りとは再帰関数で最適解となりえないと判断するとそこで探索を打ち切る事で高速化する手法です。アリ本では数独の問題が載っていました。計算量の解析が難しく、AtCoderの問題であまり見ない気がしますね。僕が解けない難しい問題だとあるのかも\u0026hellip;何にせよ、マラソンなどで使えるテクニックな気がしますね。\n8. 分枝限定法 (工事中)\n","date":1580860800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1580860800,"objectID":"015b454bc78c0c867d9298d9e6a9f262","permalink":"https://ch-random.net/post/5/","publishdate":"2020-02-05T00:00:00Z","relpermalink":"/post/5/","section":"post","summary":"全探索","tags":["競技プログラミング","競プロ勉強会"],"title":"第1回競プロ勉強会","type":"post"},{"authors":["YuKi"],"categories":null,"content":"はじめに こんにちは. Yuです. らんだむちゃんまとめました.\nまとめ 絵柄を安定させたいなと思いました.\n","date":1580688000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1580688000,"objectID":"84fd9322ca0817deac0ef95d0e3caa32","permalink":"https://ch-random.net/post/2/","publishdate":"2020-02-03T00:00:00Z","relpermalink":"/post/2/","section":"post","summary":"らんだむちゃんだよ","tags":["グラフィック","作品紹介"],"title":"らんだむちゃん","type":"post"},{"authors":["pngn"],"categories":null,"content":"はじめに こんにちは。情報2回のpngnです。皆さんはHugoってご存知ですか？僕はこのサイトを作り始めるまで知りませんでした。よく知らない方のためにかいつまんで特徴を説明すると\n 静的サイトジェネレーター(つまりphpとかサーバー側で動かす処理が書けない) Goで書かれていて速い マークダウンで書ける 静的サイトなのでGithub PageやNetlifyが無料で使える  らしいです。今回はAcademicというHugoのテーマを利用しました。\nこの記事はこのサイトを使いたい方(つまり部員)とAcademicのテーマをソースレベルでいじりたい方(いるのかなぁ)に向けて書かれています。\nHugoの使い方 自分のパソコンでHugoを動かしたい人はやりましょう。Academicを使うためにHugo Extendedをこのページからダウンロードしてインストールします。Extendedをダウンロードする事に注意。このサイトのテーマのソースコードはここからダウンロードできます。\ngitでcloneしてきて、そのrootフォルダに移動してターミナルで\n\u0026gt; hugo server  と打ちましょう。http://localhost:1313/でアクセスできるようになります。ビルドはhugoコマンドです。\nコンテンツは基本的にcontentフォルダに入っています。その中でAcademicにおいて特別に意味のあるフォルダを紹介します。\n authors: 著者 (テンプレート) post: ブログ (テンプレート) slides: スライド (テンプレート) project: プロジェクト home: トップページ  基本的にそれぞれのフォルダの中に記事のフォルダを入れて、その中にindex.md(authorsは_index.md)とfeatured.png/jpgを入れるとOKです。画像は縦横比3:4のものが理想です。index.mdはテンプレートを参考に書いて下さい。カスタムCSSも使えます。\nAcademicのカスタマイズ これ需要あるのか分からないですが、僕がAcademicをいじった時つまった事を共有しておきます。\n /themes/academic/の中のどのファイルをいじればいいか分からない  だいたい/layouts/partials/の中 たまに/layouts/_default/とか/layouts/section/とか CSSは/assets/scss/の中 どうしても分からない時はacademicのgithub内検索 ファイルの中身を一時的に消してどう変化するかを見ると分かりやすいよ   ライブラリのコードをいじる際、たまにHot Reloadがかからない事がある  hugo serverし直せばよい   Hugo独特の書き方がキモい(はい) AcademicはTagに日本語が入るとリンクが切れるバグ？があるので注意  /layouts/partials/tags.htmlをいじるとなおった    いかがでしたか？何の役にも立ちませんね。そもそもテーマのソースをいじろうと思う人って僕のアドバイスなんて必要ないですよね。おわり\n思った事 ここまで読んで、pngnってWebつよつよマンなんだなぁって思われるかもしれないですが、実は僕Web初心者です。html触るの久しぶりだしCSSはノリで書いてるのでゴミコードを書いてしまった気がします。そんな僕が今回Webを作って思った事を書きます。\nそもそもhtmlってトップダウンでできてますよね。簡単に言うと親から順番にDOMが決まるって事です。子要素が親DOMの情報に依存する\u0026hellip;けれども親の情報を取るのは簡単じゃない状況ってモジュール化の観点で微妙な気がします。例えば親にかかっているCSSによって子要素のデザインは変化しますが、それが何か知ることは出来ないですよね？(あったら教えて下さい)それが大規模開発における複雑さの原因になりうると僕は思います。後は同じソースにhtml, js, css, hugoやphpなど複数の言語が存在するのは複雑だし、CSSでPCとスマホ両方に対応させないといけないの大変ですよね。クロスプラットのflutter、Web版はCanvasで描かれているようで、現状遅いです。今後に期待\nまとめ 部員のみんなは記事書いてね\n","date":1578009600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1578009600,"objectID":"51d07f5eaaa65f02638280b919d766ae","permalink":"https://ch-random.net/post/1/","publishdate":"2020-01-03T00:00:00Z","relpermalink":"/post/1/","section":"post","summary":"ランダムのWebサイトを作りました","tags":["web"],"title":"HugoでWeb構築","type":"post"},{"authors":["pngn"],"categories":null,"content":"はじめに こんにちは。情報2回のpngnです。皆さんはHugoってご存知ですか？僕はこのサイトを作り始めるまで知りませんでした。よく知らない方のためにかいつまんで特徴を説明すると\n 静的サイトジェネレーター(つまりphpとかサーバー側で動かす処理が書けない) Goで書かれていて速い マークダウンで書ける 静的サイトなのでGithub PageやNetlifyが無料で使える  らしいです。今回はAcademicというHugoのテーマを利用しました。\nこの記事はこのサイトを使いたい方(つまり部員)とAcademicのテーマをソースレベルでいじりたい方(いるのかなぁ)に向けて書かれています。\nHugoの使い方 自分のパソコンでHugoを動かしたい人はやりましょう。Academicを使うためにHugo Extendedをこのページからダウンロードしてインストールします。Extendedをダウンロードする事に注意。このサイトのテーマのソースコードはここからダウンロードできます。\ngitでcloneしてきて、そのrootフォルダに移動してターミナルで\n\u0026gt; hugo server  と打ちましょう。http://localhost:1313/でアクセスできるようになります。ビルドはhugoコマンドです。\nコンテンツは基本的にcontentフォルダに入っています。その中でAcademicにおいて特別に意味のあるフォルダを紹介します。\n authors: 著者 (テンプレート) post: ブログ (テンプレート) slides: スライド (テンプレート) project: プロジェクト home: トップページ  基本的にそれぞれのフォルダの中に記事のフォルダを入れて、その中にindex.md(authorsは_index.md)とfeatured.png/jpgを入れるとOKです。画像は縦横比3:4のものが理想です。index.mdはテンプレートを参考に書いて下さい。カスタムCSSも使えます。\nAcademicのカスタマイズ これ需要あるのか分からないですが、僕がAcademicをいじった時つまった事を共有しておきます。\n /themes/academic/の中のどのファイルをいじればいいか分からない  だいたい/layouts/partials/の中 たまに/layouts/_default/とか/layouts/section/とか CSSは/assets/scss/の中 どうしても分からない時はacademicのgithub内検索 ファイルの中身を一時的に消してどう変化するかを見ると分かりやすいよ   ライブラリのコードをいじる際、たまにHot Reloadがかからない事がある  hugo serverし直せばよい   Hugo独特の書き方がキモい(はい) AcademicはTagに日本語が入るとリンクが切れるバグ？があるので注意  /layouts/partials/tags.htmlをいじるとなおった    いかがでしたか？何の役にも立ちませんね。そもそもテーマのソースをいじろうと思う人って僕のアドバイスなんて必要ないですよね。おわり\n思った事 ここまで読んで、pngnってWebつよつよマンなんだなぁって思われるかもしれないですが、実は僕Web初心者です。html触るの久しぶりだしCSSはノリで書いてるのでゴミコードを書いてしまった気がします。そんな僕が今回Webを作って思った事を書きます。\nそもそもhtmlってトップダウンでできてますよね。簡単に言うと親から順番にDOMが決まるって事です。子要素が親DOMの情報に依存する\u0026hellip;けれども親の情報を取るのは簡単じゃない状況ってモジュール化の観点で微妙な気がします。例えば親にかかっているCSSによって子要素のデザインは変化しますが、それが何か知ることは出来ないですよね？(あったら教えて下さい)それが大規模開発における複雑さの原因になりうると僕は思います。後は同じソースにhtml, js, css, hugoやphpなど複数の言語が存在するのは複雑だし、CSSでPCとスマホ両方に対応させないといけないの大変ですよね。クロスプラットのflutter、Web版はCanvasで描かれているようで、現状遅いです。今後に期待\nまとめ 部員のみんなは記事書いてね\n","date":1578009600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1578009600,"objectID":"3c8a7a4db618e942f6aa936cd744b89f","permalink":"https://ch-random.net/post/31/","publishdate":"2020-01-03T00:00:00Z","relpermalink":"/post/31/","section":"post","summary":"今年こそ本選出るぞ","tags":["活動紹介"],"title":"ICPC2020に出ます","type":"post"},{"authors":["pngn"],"categories":null,"content":"はじめに こんにちは。情報2回のpngnです。皆さんはHugoってご存知ですか？僕はこのサイトを作り始めるまで知りませんでした。よく知らない方のためにかいつまんで特徴を説明すると\n 静的サイトジェネレーター(つまりphpとかサーバー側で動かす処理が書けない) Goで書かれていて速い マークダウンで書ける 静的サイトなのでGithub PageやNetlifyが無料で使える  らしいです。今回はAcademicというHugoのテーマを利用しました。\nこの記事はこのサイトを使いたい方(つまり部員)とAcademicのテーマをソースレベルでいじりたい方(いるのかなぁ)に向けて書かれています。\nHugoの使い方 自分のパソコンでHugoを動かしたい人はやりましょう。Academicを使うためにHugo Extendedをこのページからダウンロードしてインストールします。Extendedをダウンロードする事に注意。このサイトのテーマのソースコードはここからダウンロードできます。\ngitでcloneしてきて、そのrootフォルダに移動してターミナルで\n\u0026gt; hugo server  と打ちましょう。http://localhost:1313/でアクセスできるようになります。ビルドはhugoコマンドです。\nコンテンツは基本的にcontentフォルダに入っています。その中でAcademicにおいて特別に意味のあるフォルダを紹介します。\n authors: 著者 (テンプレート) post: ブログ (テンプレート) slides: スライド (テンプレート) project: プロジェクト home: トップページ  基本的にそれぞれのフォルダの中に記事のフォルダを入れて、その中にindex.md(authorsは_index.md)とfeatured.png/jpgを入れるとOKです。画像は縦横比3:4のものが理想です。index.mdはテンプレートを参考に書いて下さい。カスタムCSSも使えます。\nAcademicのカスタマイズ これ需要あるのか分からないですが、僕がAcademicをいじった時つまった事を共有しておきます。\n /themes/academic/の中のどのファイルをいじればいいか分からない  だいたい/layouts/partials/の中 たまに/layouts/_default/とか/layouts/section/とか CSSは/assets/scss/の中 どうしても分からない時はacademicのgithub内検索 ファイルの中身を一時的に消してどう変化するかを見ると分かりやすいよ   ライブラリのコードをいじる際、たまにHot Reloadがかからない事がある  hugo serverし直せばよい   Hugo独特の書き方がキモい(はい) AcademicはTagに日本語が入るとリンクが切れるバグ？があるので注意  /layouts/partials/tags.htmlをいじるとなおった    いかがでしたか？何の役にも立ちませんね。そもそもテーマのソースをいじろうと思う人って僕のアドバイスなんて必要ないですよね。おわり\n思った事 ここまで読んで、pngnってWebつよつよマンなんだなぁって思われるかもしれないですが、実は僕Web初心者です。html触るの久しぶりだしCSSはノリで書いてるのでゴミコードを書いてしまった気がします。そんな僕が今回Webを作って思った事を書きます。\nそもそもhtmlってトップダウンでできてますよね。簡単に言うと親から順番にDOMが決まるって事です。子要素が親DOMの情報に依存する\u0026hellip;けれども親の情報を取るのは簡単じゃない状況ってモジュール化の観点で微妙な気がします。例えば親にかかっているCSSによって子要素のデザインは変化しますが、それが何か知ることは出来ないですよね？(あったら教えて下さい)それが大規模開発における複雑さの原因になりうると僕は思います。後は同じソースにhtml, js, css, hugoやphpなど複数の言語が存在するのは複雑だし、CSSでPCとスマホ両方に対応させないといけないの大変ですよね。クロスプラットのflutter、Web版はCanvasで描かれているようで、現状遅いです。今後に期待\nまとめ 部員のみんなは記事書いてね\n","date":1578009600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1578009600,"objectID":"52803e4e6183860e14ff3d1b634a5723","permalink":"https://ch-random.net/post/32/","publishdate":"2020-01-03T00:00:00Z","relpermalink":"/post/32/","section":"post","summary":"Made by Flutter","tags":["活動紹介"],"title":"Rectas","type":"post"},{"authors":null,"categories":null,"content":"ごにょごにょ\n","date":1577750400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1577750400,"objectID":"3505b4b3b544689ae4eaeb69207af5e2","permalink":"https://ch-random.net/project/reyunion/","publishdate":"2019-12-31T00:00:00Z","relpermalink":"/project/reyunion/","section":"project","summary":"Web作ります","tags":["Vtuber"],"title":"Web","type":"project"},{"authors":null,"categories":null,"content":"ごにょごにょ\n","date":1577750400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1577750400,"objectID":"988498195ec9b9770e49b6f5e3f9b16d","permalink":"https://ch-random.net/project/random_chan/","publishdate":"2019-12-31T00:00:00Z","relpermalink":"/project/random_chan/","section":"project","summary":"大学Vtuberを目指します","tags":["Vtuber"],"title":"ランダムちゃんProject","type":"project"},{"authors":["pngn"],"categories":[],"content":"Create slides in Markdown with Academic Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot;\rif porridge == \u0026quot;blueberry\u0026quot;:\rprint(\u0026quot;Eating...\u0026quot;)\r  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\r Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\r Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view \r  Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}}\r{{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}\r  Custom CSS Example Let's make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\r  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1549324800,"objectID":"075a6fdb12eafad3d8c8ca018bec4531","permalink":"https://ch-random.net/slides/1/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/1/","section":"slides","summary":"flutter!","tags":[],"title":"Flutter入門","type":"slides"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"e3f94f472b0f3499031ef64f39efbf24","permalink":"https://ch-random.net/download/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/download/","section":"","summary":" ","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"Computer House Randomはパソコンによる創作・プログラミング活動を行っている大阪府立大学の部活動です。活動内容はゲーム制作や競技プログラミング、DTM、グラフィックやVtuberなど多岐にわたります。\n火曜日の18時から行われる部会に参加しさえすれば、部室で自由に活動できます。休憩にゲーム(Switch, PS4, beatmania\u0026hellip;)やボドゲで遊んでいる部員も多いです。\nプログラミング経験者はもちろん未経験者も大歓迎です。毎年前期に主にプログラミングが初めてという1回生にむけてプログラミング勉強会が開催されるので初心者でも安心です。\nまずは部室に来てみて下さい。連絡方法や場所はこちらから\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://ch-random.net/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"Computer House Randomはパソコンによる創作・プログラミング活動を行っている大阪府立大学の部活動です。活動内容はゲーム制作や競技プログラミング、DT","tags":null,"title":"Randomについて","type":"page"},{"authors":null,"categories":null,"content":"Computer House RandomのWebサイトは静的サイトジェネレーターHugoを使用し、テーマはAcademicを改変して利用しました。\nこのWebサイトのテーマのソースコードはMIT licenseの元でここからダウンロード出来ます。\nサイトのコンテンツの中身の著作権は記事の著者に属し、著者の許可なくコンテンツを複製し公開する事を禁じます。但し、記事で用いたソースコードはその範囲外とし自由に利用して良いものとします。\n記事の引用は自由に行ってもらって構いません。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"ec751500388d501a532eaca39aeccb9e","permalink":"https://ch-random.net/license/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/license/","section":"","summary":"Computer House RandomのWebサイトは静的サイトジェネレーターHugoを使用し、テーマはAcademicを改変して利用しました。 このWebサイトの","tags":null,"title":"ライセンス","type":"page"}]